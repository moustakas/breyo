#!/usr/bin/env python

"""Pipeline-reduce a single night of Breyo imaging.


"""
import os, pdb
import argparse
import numpy as np

import astropy.stats
import astropy.units as u
import astropy.table
from astropy.wcs import WCS
from astropy.coordinates import SkyCoord
from astropy.nddata import CCDData

import ccdproc as ccdp

import breyo.io

image2type = {'Light Frame': 'object',
              'Dark Frame': 'dark',
              'Flat Field': 'flat',
              'Bias Frame': 'bias'}

newfilt = {'Blue': 'B',
           'Green': 'V',
           'Red': 'R',
           'OIII': 'OIII',
           'O3': 'OIII',
           'Ha': 'Halpha',
           'Halpha': 'Halpha',
           }

allfilt = ('B', 'V', 'R')

kext = {'B': 0.4, 'V': 0.2, 'R': 0.1}

def _inv_median(a):
    return 1 / np.median(a)
                
def main():
    """

    """
    parser = argparse.ArgumentParser()
    parser.add_argument('night', type=str, help='Specify the night to reduce.')
    parser.add_argument('--preproc', action='store_true', help='Preprocess the raw data.')
    parser.add_argument('--masterbias', action='store_true', help='Build the master bias frame.')
    parser.add_argument('--masterflats', action='store_true', help='Build the master (sky)flats.')
    parser.add_argument('--reduceall', action='store_true', help='Process the science images.')
    parser.add_argument('--astrometry', action='store_true', help='Solve the astrometry.')
    parser.add_argument('--refstars', action='store_true', help='Generate reference photometric catalog.')
    parser.add_argument('--photcalib', action='store_true', help='Photometrically calibrate.')
    parser.add_argument('--stack', action='store_true', help='Build image stacks.')

    parser.add_argument('--verbose', action='store_true', help='Be verbose.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    rawdir = breyo.io.get_rawdir(args.night)
    reduxdir, calibdir = breyo.io.get_reduxdir(args.night)
    config = breyo.io.read_config()

    masterbiasfile = os.path.join(reduxdir, 'master-bias.fits')

    # ToDo: building uncertainty map and bad pixel mask
    # https://ccdproc.readthedocs.io/en/latest/reduction_toolbox.html#gain-correct-and-create-deviation-image
    # https://mwcraig.github.io/ccd-as-book/08-00-Image-masking.html
    if args.preproc:
        keys = ['naxis1', 'naxis2', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(rawdir, keywords=keys, glob_include='*.fit*')
        print('Parsing {} files in {}'.format(len(ic.files), rawdir))
        if args.verbose:
            print(ic.summary)

        for exp, fname in ic.hdus(return_fname=True):
            rawfile = os.path.join(rawdir, fname)
            hdr = exp.header
            imtype = image2type[hdr['IMAGETYP']]

            # basic sanity checks
            if (imtype == 'object' or imtype == 'flat') and 'FILTER' not in hdr:
                print('Missing FILTER in image {}'.format(rawfile))
                continue

            if hdr['NAXIS2'] < 1000:
                print('Subframe issue in image {}'.format(rawfile))
                continue

            # push these cases to a function
            if imtype == 'bias' or imtype == 'dark' or imtype == 'flat':
                outfile = os.path.join(calibdir, fname.replace('.fit', '.fits'))
            else:
            #    filt = newfilt[hdr['FILTER']].strip()
            #    obj = hdr['OBJECT'].strip()
            #    outfile = os.path.join(reduxdir, '{}-{}.fits'.format(obj, filt))
                 outfile = os.path.join(reduxdir, 'p-{}'.format(fname.replace('.fit', '.fits')))
                
            if os.path.isfile(outfile) and not args.overwrite:
                print('Skipping existing file {}'.format(outfile))
            else:
                # update the header
                hdr['IMAGETYP'] = imtype
                if 'FILTER' in hdr:
                    hdr['FILTER'] = newfilt[hdr['FILTER']]

                # ToDo: generalize the trimming!
                img = CCDData(data=exp.data.astype('f4'), meta=hdr, unit=u.adu)
                img = ccdp.trim_image(img[:, 50:], add_keyword={'TRIM': True})
                img = ccdp.gain_correct(img, gain=config['ccd']['gain'],
                                        add_keyword={'GAINCOR': True})

                print('Writing {}'.format(outfile))
                img.write(outfile, overwrite=True)

    if args.masterbias:
        if os.path.isfile(masterbiasfile) and not args.overwrite:
            print('Skipping existing master bias {}'.format(masterbiasfile))
        else:
            keys = ['naxis1', 'naxis2', 'imagetyp', 'exptime']
            ic = ccdp.ImageFileCollection(calibdir, keywords=keys, glob_include='bias*.fits')
            if args.verbose:
                print(ic.summary)
                
            nbias = len(ic.files)
            print('Building master bias from {} images in {}'.format(nbias, calibdir))

            masterbias = ccdp.combine(ic.files_filtered(include_path=True),
                                      method='average', sigma_clip=True,
                                      sigma_clip_low_thresh=5, 
                                      sigma_clip_high_thresh=5,
                                      sigma_clip_func=np.ma.median,
                                      sigma_clip_dev_func=astropy.stats.mad_std)
            masterbias.header['NBIAS'] = nbias
            masterbias.header['COMBINED'] = True

            print('  Writing {}'.format(masterbiasfile))
            masterbias.write(masterbiasfile, overwrite=True)

    if args.masterflats:
        print('Reading {}'.format(masterbiasfile))
        masterbias = CCDData.read(masterbiasfile)

        ic = ccdp.ImageFileCollection(calibdir, keywords='*', glob_include='skyflat*.fits')
        for filt in set(ic.summary['filter']):
            masterflatfile = os.path.join(reduxdir, 'master-flat-{}.fits'.format(filt))
            if os.path.isfile(masterflatfile) and not args.overwrite:
                print('Skipping existing master flat {}'.format(masterflatfile))
            else:
                icflats = ic.filter(imagetyp='flat', filter=filt)
                nflat = len(icflats.files)
                print('Building {} masterflat from {} images found in {}'.format(filt, nflat, calibdir))

                rflats = []
                for ccd in icflats.ccds():
                    rflats.append( ccdp.subtract_bias(ccd, masterbias, add_keyword={'SUBBIAS': True}) )
                    
                masterflat = ccdp.combine(rflats, method='average', scale=_inv_median,
                                          sigma_clip=True,
                                          sigma_clip_low_thresh=5, 
                                          sigma_clip_high_thresh=5,
                                          sigma_clip_func=np.ma.median,
                                          sigma_clip_dev_func=astropy.stats.mad_std)
                masterflat.header['NFLAT'] = nflat
                masterflat.header['COMBINED'] = True

                print('  Writing {}'.format(masterflatfile))
                masterflat.write(masterflatfile, overwrite=True)

    if args.reduceall:
        print('Reading {}'.format(masterbiasfile))
        masterbias = CCDData.read(masterbiasfile)

        keys = ['file', 'naxis1', 'naxis2', 'object', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(reduxdir, keywords=keys, glob_include='p-*.fits')
                                      
        if args.verbose:
            print(ic.summary)
        
        for filt in set(ic.summary['filter']):
            # throw an error if not found
            masterflatfile = os.path.join(reduxdir, 'master-flat-{}.fits'.format(filt))
            print('Reading {}'.format(masterflatfile))
            masterflat = CCDData.read(masterflatfile)
            
            icfilt = ic.filter(filter=filt)
            for pccd, fname in icfilt.ccds(return_fname=True):
                pfile = os.path.join(reduxdir, fname)
                outfile = os.path.join(reduxdir, 'fb{}'.format(fname))
                if os.path.isfile(outfile) and not args.overwrite:
                    print('Skipping existing file {}'.format(outfile))
                else:
                   fbpccd = ccdp.ccd_process(pccd, master_bias=masterbias, master_flat=masterflat,
                                             add_keyword={
                                                 'SUBBIAS': True,
                                                 'FLATCOR': True,
                                                 'BIASFILE': os.path.basename(masterbiasfile),
                                                 'FLATFILE': os.path.basename(masterflatfile),
                                                 })
                                             #gain=config['ccd']['gain'],
                                             #readnoise=config['ccd']['readnoise'])                

                   print('  Writing {}'.format(outfile))
                   fbpccd.write(outfile, overwrite=True)

    if args.astrometry:
        import subprocess
        
        configfile = os.path.join(os.getenv('BREYO_DATA_DIR'), 'astrometry.net', 'index-5000', 'cfg')

        keys = ['file', 'object', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(reduxdir, keywords=keys, glob_include='fbp-M81*.fits')
        for fname in ic.files_filtered(include_path=True):

            outfile = os.path.join(reduxdir, 'a{}'.format(os.path.basename(fname)))
            if os.path.isfile(outfile) and not args.overwrite:
                print('Skipping existing file {}'.format(outfile))
            else:
                hdr = astropy.io.fits.getheader(fname)
                c = SkyCoord(hdr['OBJCTRA']+hdr['OBJCTDEC'], unit=(u.hourangle, u.deg))
                ra, dec = c.ra.value, c.dec.value
                axyfile = outfile.replace('.fits', '.axy')
                #wcsfile = '$(mktemp /tmp/{}.wcs)'.format(os.path.basename(outfile).replace('.fits', ''))

                cmd =  'solve-field {scifile} --config {configfile} --ra {ra} --dec {dec} '
                cmd += '--scale-low 0.5 --scale-high 1.0 --scale-units arcsecperpix '
                cmd += '--radius 0.5 --tweak-order 2 --crpix-center --nsigma 10 --objs 100 '
                cmd += '--solved none --index-xyls none --match none '
                cmd += '--rdls none --corr none --axy {axyfile} ' # --temp-axy
                cmd += '--new-fits {outfile} ' # --wcs {wcsfile} '
                cmd += '--no-verify --no-plots --overwrite ' 
                cmd = cmd.format(scifile=fname, outfile=outfile, axyfile=axyfile,
                                 #wcsfile=wcsfile,
                                 configfile=configfile, ra=ra, dec=dec)
                if args.verbose:
                    print(cmd)
                err = subprocess.call(cmd.split())

    # Gather up reference stars.
    if args.refstars:
        from breyo.photo import find_stars, get_panstarrs_catalog

        matchrad = 2 * u.arcsec

        keys = ['file', 'object', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(reduxdir, keywords=keys, glob_include='afbp-*.fits')
        if args.verbose:
            print(ic.summary)

        for hdu, fname in ic.hdus(return_fname=True):

            outfile = os.path.join(reduxdir, 'refstars-{}-{}'.format(hdu.header['FILTER'], fname))
            if os.path.isfile(outfile) and not args.overwrite:
                print('Skipping existing file {}'.format(outfile))
            else:
                imgwcs = WCS(hdu.header)
                img = hdu.data # [electron]

                # find stars in the image
                srcs = find_stars(img, nsigma=5, fwhm=2.0, verbose=args.verbose)

                # query for reference stars
                # https://astroquery.readthedocs.io/en/latest/mast/mast.html
                # https://outerspace.stsci.edu/display/PANSTARRS/PS1+MeanObjectView+table+fields
                refsrcs = get_panstarrs_catalog(imgwcs, radius=0.3, verbose=args.verbose)

                # match them, merge the tables, and write out
                radec_stars = imgwcs.all_pix2world(srcs['xcentroid']+1, srcs['ycentroid']+1, 1)
                refcoord = SkyCoord(ra=refsrcs['raMean'] * u.deg, dec=refsrcs['decMean'] * u.deg)
                coord = SkyCoord(ra=radec_stars[0] * u.deg, dec=radec_stars[1] * u.deg)

                indx_ref, indx, d2d, _ = coord.search_around_sky(refcoord, matchrad)
                nstar = len(indx_ref)
                if args.verbose:
                    print('Found {}/{} stars within {}'.format(nstar, len(srcs), matchrad))

                out = astropy.table.hstack((refsrcs[indx_ref], srcs[indx]))
                out.add_column(astropy.table.Column(name='airmass', dtype='f4',
                                                    data=np.repeat(hdu.header['AIRMASS'], nstar)))
                out.add_column(astropy.table.Column(name='exptime', dtype='f4',
                                                    data=np.repeat(hdu.header['EXPTIME'], nstar)))
                out.add_column(astropy.table.Column(data=np.repeat(hdu.header['DATE-OBS'], nstar),
                                                    name='date-obs'))

                outhdu = astropy.io.fits.convenience.table_to_hdu(out)
                outhdu.header['EXTNAME'] = 'REFSTARS'
                for key in ('DATE-OBS', 'EXPTIME', 'AIRMASS', 'FILTER'):
                    outhdu.header[key] = (hdu.header[key], hdu.header.comments[key])

                print('Writing {} reference stars to {}'.format(len(out), outfile))
                outhdu.writeto(outfile, overwrite=True)

    if args.photcalib:
        keys = ['file', 'object', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(reduxdir, keywords=keys, glob_include='afbp-*.fits')
        if args.verbose:
            print(ic.summary)

        for filt in allfilt:

            icfilt = ic.filter(filter=filt)
            for hdu, fname in icfilt.hdus(return_fname=True):

                imgwcs = WCS(hdu.header)
                airmass, exptime = hdu.header['AIRMASS'], hdu.header['EXPTIME']
                img = hdu.data / exptime # [electron/s]

                # stars in the image
                starsfile = os.path.join(reduxdir, 'stars-{}'.format(fname))
                if not os.path.isfile(starsfile) or args.overwrite:
                    srcs = find_stars(img, exptime=exptime, nsigma=5,
                                      fwhm=2.0, verbose=args.verbose)
                    print('Writing {} stars to {}'.format(len(srcs), starsfile))
                    srcs.write(starsfile, overwrite=True)
                else:
                    srcs = astropy.table.Table.read(starsfile)
                    print('Read {} stars from {}'.format(len(srcs), starsfile))

                # reference stars
                # https://astroquery.readthedocs.io/en/latest/mast/mast.html
                # https://outerspace.stsci.edu/display/PANSTARRS/PS1+MeanObjectView+table+fields
                
                refstarsfile = os.path.join(reduxdir, 'refstars-{}'.format(fname))
                if not os.path.isfile(refstarsfile) or args.overwrite:
                    refsrcs = get_panstarrs_catalog(imgwcs, radius=0.3, verbose=args.verbose)
                    print('Writing {} reference stars to {}'.format(len(refsrcs), refstarsfile))
                    refsrcs.write(refstarsfile, overwrite=True)
                else:
                    refsrcs = Table.read(refstarsfile)
                    print('Read {} refstars from {}'.format(len(refsrcs), refstarsfile))

                # match them
                rad = 2 * u.arcsec

                radec_stars = imgwcs.all_pix2world(srcs['xcentroid']+1, srcs['ycentroid']+1, 1)
                refcoord = SkyCoord(ra=refsrcs['raMean'] * u.deg, dec=refsrcs['decMean'] * u.deg)
                coord = SkyCoord(ra=radec_stars[0]*u.deg, dec=radec_stars[1]*u.deg)
                
                indx_ref, indx, d2d, _ = coord.search_around_sky(refcoord, rad)
                print('Found {}/{} stars within {}'.format(len(indx_ref), len(srcs), rad))

                # write out
                
                pdb.set_trace()

                ## derive the zeropoint(s)
                #pdb.set_trace()
                #instmag = srcs['mag'][indx] - 0.4 * airmass * kext[filt]
                #ps_r = refsrcs['rMeanPSFMag'][indx_ref]

if __name__ == '__main__':
    main()
