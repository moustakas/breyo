#!/usr/bin/env python

"""Pipeline-reduce a single night of Breyo imaging.


"""
import os, glob, time, pdb
import argparse

import numpy as np

import astropy.stats
import astropy.units as u
from astropy.nddata import CCDData

import ccdproc as ccdp

import breyo.io

image2type = {'Light Frame': 'object',
              'Dark Frame': 'dark',
              'Flat Field': 'flat',
              'Bias Frame': 'bias'}

newfilt = {'Blue': 'B',
           'Green': 'V',
           'Red': 'R',
           'OIII': 'OIII',
           'O3': 'OIII',
           'Ha': 'Halpha',
           'Halpha': 'Halpha',
           }

def _inv_median(a):
    return 1 / np.median(a)
                
def main():
    """
    do_masterbias = False
    do_masterflats = False
    do_reduce_alldata = False
    do_calib_stars = False
    do_astrometry = False
    do_ref_stars = False
    do_photometry = False

    """
    parser = argparse.ArgumentParser()
    parser.add_argument('night', type=str, help='Specify the night to reduce.')
    parser.add_argument('--preproc', action='store_true', help='Preprocess the raw data.')
    parser.add_argument('--masterbias', action='store_true', help='Build the master bias frame.')
    parser.add_argument('--masterflats', action='store_true', help='Build the master (sky)flats.')
    parser.add_argument('--reduceall', action='store_true', help='Process the science images.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    rawdir = os.path.join(os.getenv('BREYO_DATA_DIR'), 'raw', args.night)
    reduxdir = os.path.join(os.getenv('BREYO_DATA_DIR'), 'reduced', args.night)
    if not os.path.isdir(reduxdir):
        os.makedirs(reduxdir, exist_ok=True)
    calibdir = os.path.join(reduxdir, 'calib')
    if not os.path.isdir(calibdir):
        os.makedirs(calibdir, exist_ok=True)

    masterbiasfile = os.path.join(reduxdir, 'master-bias.fits')

    config = breyo.io.read_config()

    # ToDo: building uncertainty map and bad pixel mask
    # https://ccdproc.readthedocs.io/en/latest/reduction_toolbox.html#gain-correct-and-create-deviation-image
    # https://mwcraig.github.io/ccd-as-book/08-00-Image-masking.html
    if args.preproc:
        keys = ['naxis1', 'naxis2', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(rawdir, keywords=keys, glob_include='*.fit*')
        print('Parsing {} files in {}'.format(len(ic.files), rawdir))
        if args.verbose:
            print(ic.summary)

        for exp, fname in ic.hdus(return_fname=True):
            rawfile = os.path.join(rawdir, fname)
            hdr = exp.header
            imtype = image2type[hdr['IMAGETYP']]

            # basic sanity checks
            if (imtype == 'object' or imtype == 'flat') and 'FILTER' not in hdr:
                print('Missing FILTER in image {}'.format(rawfile))
                continue

            if hdr['NAXIS2'] < 1000:
                print('Subframe issue in image {}'.format(rawfile))
                continue

            # push these cases to a function
            if imtype == 'bias' or imtype == 'dark' or imtype == 'flat':
                outfile = os.path.join(calibdir, fname.replace('.fit', '.fits'))
            else:
            #    filt = newfilt[hdr['FILTER']].strip()
            #    obj = hdr['OBJECT'].strip()
            #    outfile = os.path.join(reduxdir, '{}-{}.fits'.format(obj, filt))
                 outfile = os.path.join(reduxdir, 'p-{}'.format(fname.replace('.fit', '.fits')))
                
            if os.path.isfile(outfile) and not args.overwrite:
                print('Skipping existing file {}'.format(outfile))
            else:
                # update the header
                hdr['IMAGETYP'] = imtype
                if 'FILTER' in hdr:
                    hdr['FILTER'] = newfilt[hdr['FILTER']]

                # ToDo: generalize the trimming!
                img = CCDData(data=exp.data.astype('f4'), meta=hdr, unit=u.adu)
                img = ccdp.trim_image(img[:, 50:], add_keyword={'TRIM': True})
                img = ccdp.gain_correct(img, gain=config['ccd']['gain'],
                                        add_keyword={'GAINCOR': True})

                print('Writing {}'.format(outfile))
                img.write(outfile, overwrite=True)

    if args.masterbias:
        if os.path.isfile(masterbiasfile) and not args.overwrite:
            print('Skipping existing master bias {}'.format(masterbiasfile))
        else:
            keys = ['naxis1', 'naxis2', 'imagetyp', 'exptime']
            ic = ccdp.ImageFileCollection(calibdir, keywords=keys, glob_include='bias*.fits')
            if args.verbose:
                print(ic.summary)
                
            nbias = len(ic.files)
            print('Building master bias from {} images in {}'.format(nbias, calibdir))

            masterbias = ccdp.combine(ic.files_filtered(include_path=True),
                                      method='average', sigma_clip=True,
                                      sigma_clip_low_thresh=5, 
                                      sigma_clip_high_thresh=5,
                                      sigma_clip_func=np.ma.median,
                                      sigma_clip_dev_func=astropy.stats.mad_std)
            masterbias.header['NBIAS'] = nbias
            masterbias.header['COMBINED'] = True

            print('  Writing {}'.format(masterbiasfile))
            masterbias.write(masterbiasfile, overwrite=True)

    if args.masterflats:
        print('Reading {}'.format(masterbiasfile))
        masterbias = CCDData.read(masterbiasfile)

        ic = ccdp.ImageFileCollection(calibdir, keywords='*', glob_include='skyflat*.fits')
        for filt in set(ic.summary['filter']):
            masterflatfile = os.path.join(reduxdir, 'master-flat-{}.fits'.format(filt))
            if os.path.isfile(masterflatfile) and not args.overwrite:
                print('Skipping existing master flat {}'.format(masterflatfile))
            else:
                icflats = ic.filter(imagetyp='flat', filter=filt)
                nflat = len(icflats.files)
                print('Building {} masterflat from {} images found in {}'.format(filt, nflat, calibdir))

                rflats = []
                for ccd in icflats.ccds():
                    rflats.append( ccdp.subtract_bias(ccd, masterbias, add_keyword={'SUBBIAS': True}) )
                    
                masterflat = ccdp.combine(rflats, method='average', scale=_inv_median,
                                          sigma_clip=True,
                                          sigma_clip_low_thresh=5, 
                                          sigma_clip_high_thresh=5,
                                          sigma_clip_func=np.ma.median,
                                          sigma_clip_dev_func=astropy.stats.mad_std)
                masterflat.header['NFLAT'] = nflat
                masterflat.header['COMBINED'] = True

                print('  Writing {}'.format(masterflatfile))
                masterflat.write(masterflatfile, overwrite=True)

    if args.reduceall:
        print('Reading {}'.format(masterbiasfile))
        masterbias = CCDData.read(masterbiasfile)

        keys = ['file', 'naxis1', 'naxis2', 'object', 'imagetyp', 'filter', 'exptime']
        ic = ccdp.ImageFileCollection(reduxdir, keywords=keys, glob_include='p-*.fits')
                                      
        if args.verbose:
            print(ic.summary)
        
        for filt in set(ic.summary['filter']):
            # throw an error if not found
            masterflatfile = os.path.join(reduxdir, 'master-flat-{}.fits'.format(filt))
            print('Reading {}'.format(masterflatfile))
            masterflat = CCDData.read(masterflatfile)
            
            icfilt = ic.filter(filter=filt)
            for pccd, fname in icfilt.ccds(return_fname=True):
                pfile = os.path.join(reduxdir, fname)
                outfile = os.path.join(reduxdir, 'fbp-{}'.format(fname))
                if os.path.isfile(outfile) and not args.overwrite:
                    print('Skipping existing file {}'.format(outfile))
                else:
                   fbpccd = ccdp.ccd_process(pccd, master_bias=masterbias, master_flat=masterflat,
                                             add_keyword={
                                                 'SUBBIAS': True,
                                                 'FLATCOR': True,
                                                 'BIASFILE': os.path.basename(masterbiasfile),
                                                 'FLATFILE': os.path.basename(masterflatfile),
                                                 })
                                             #gain=config['ccd']['gain'],
                                             #readnoise=config['ccd']['readnoise'])                

                   print('  Writing {}'.format(outfile))
                   fbpccd.write(outfile, overwrite=True)

if __name__ == '__main__':
    main()
